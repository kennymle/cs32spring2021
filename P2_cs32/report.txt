HW2 Cs32
Kenny Le

===========================================
Description:
===========================================

I tried to implement circular doubly linked list for this project.
Instead of utilizing a tail pointer or nullptrs, the for loops are
different in terms of iterating until it reaches the original head
pointer as opposed to reaching a nullptr. However, the initial head
node is designated as a dummy node which is why the loops all start
with head->next for iterations of many of my "temp" variables as
opposed to starting with the actual pointer of head. My list nodes
are defined with the ItemType data, Node* next, and Node* prev.
There are no particular order regarding those parameters noted above,
but there is a particular order created from the insert function.




===========================================
Pseudocode:
===========================================
Set::Set()
{
	sets private data member m_size to 0
	creates dummy node
	next pointer points to dummy node
	prev pointer points to dummy node
}


Set::~Set()
{
	for size = 0 to m_size:
		create temp node and set pointer to current node's next
		current node's next set equal to temp node's next 
		(to maintain pointer to next node in sequence)
		temp's node's next's prev set to current node;
		delete temp node which, in turn, the current node.
	exit loop
	
	delete dummy variable i.e. head;
}


Set::Set(const Set& other)
{
	sets private data member m_size to 0
	creates dummy node
	next pointer points to dummy node
	prev pointer points to dummy node
	//same as default constructor

	for iterating node = other's head->next until node reaches other's head:
		use insert function to insert node's data into the current node/linked list
	exit loop
}


Set& Set::operator=(const Set& rhs)
{
	if current pointer does not equal the "rhs" pointer:
		create temporary set with rhs pointer
		use swap function to set current pointer to temporary pointer/set
	exit loop
	return "this" current pointer
}


bool Set::insert(const ItemType& value)
{
	create temp node equal to head's next (node after dummy node)
	while temp doesn't equal head && temp's data is greater than given value in paramenter,
		temp increments to the next node
	end of loop
	
	if temp equals head or temp's data doesn't equal the parameter value:
		create new node and set it's data to the given value
		set new node's next poitner to point to the temp node
		set new node's prev poitner to point to the temp's prev pointer
		set temp's prev's next to point to new node
		set temp's prev pointer to point to new node
		increment m_size by one
		return true
	otherwise return false
}



bool Set::erase(const ItemType& value)
{
	set temporary node "temp" to head's next (second node)
	while temp doesn't equal head && temp's data is greater than given value in paramenter,
		temp increments to the next node
	end of loop
	
	if temp's data isn't equal to value or temp pointer is to head
		return false

	otherwise,
	set temp's previous's next to equal temp's next
	set temp's next's previous to equal temp's previous
	delete temp
	reduce size by 1
	return true
}


bool Set::contains(const ItemType& value) const
{
	set temporary node "temp" to head's next (second node)
	for temp doesn't equal head && temp's data is greater than given value in paramenter; temp increments to the next node
		if data of node equals value
			return true
	end of loop
	return false
}


bool Set::get(int i, ItemType& value) const         
{    
	if i is out of bounds, return false
	set temporary node "temp" to head's next (second node)
	while i is greater than 0:
		move temp to point to next node and decrease i by 1
	end loop
	value is set equal to temp's data and return true
}


void Set::swap(Set& other)       
{
	//swap int size
	using temp int variable, set it equal to other's size
	set other's size to "this" size
	set "this" size to temp's size

	//swap pointers
	using temp pointer, set to other's head
	set other's head to "this" head
	set "this" head to temp
}


void unite(const Set& s1, const Set& s2, Set& result)
{
	create temporary empty set called "temp" & arbitrary ItemType variable called "element"
	
	iterating through first set s1 in for loop:
		"get" the element from s1 and "insert" it into temp
	iterating through second set s2 in for loop:
		"get" the element from s2 and "insert" it into temp
	
	swap result with temp using "swap"
}


void difference(const Set& s1, const Set& s2, Set& result)
{
	create temporary empty set called "temp" & arbitrary ItemType variable called "element"

	if s1 is bigger than s2:
		iterating through first set s1 in for loop:
			"get" the element from s1 and "insert" it into temp
		then iterating through second set s2 in for loop:
			"get" the element from s2 and "insert" it into temp
			However, if we can't "insert", we erase that element from temp.
	end loop

	if s1 is smaller than s2:
		iterating through second set s2 in for loop:
			"get" the element from s2 and "insert" it into temp
		then iterating through first set s1 in for loop:
			"get" the element from s1 and "insert" it into temp
			However, if we can't "insert", we erase that element from temp.
	end loop

	swap result with temp using "swap"
}




===========================================
Test Cases:
===========================================
    //test for insert and size and contain and get functions
    Set ss;
    assert(ss.insert("asdf"));
    assert(ss.insert("jkl"));
    assert(ss.size() == 2);
    assert(ss.contains("jkl"));
    ItemType x = "lol";
    assert(ss.get(0, x) && x == "jkl");
    assert(ss.get(1, x) && x == "asdf");
    assert(!ss.erase("gg"));             //erase function
    assert(!ss.erase("gg"));
    assert(!ss.contains("gg"));


    Set aa;
    assert(aa.insert("33"));
    assert(aa.insert("jkl"));
    assert(aa.insert("11"));
    assert(aa.size() == 3);

    Set result;
    Set diff;
    unite(aa, ss, result);
    assert(result.size() == 4);
    assert(result.size() != 5);

    difference(aa, ss, diff);
    assert(diff.size() == 1);
    assert(diff.contains("jkl"));

    //testing for Set, empty, size, insert,
//erase, contains, and get functions
    Set a;
    assert(a.empty());
    assert(a.size() == 0);
    a.insert("tt");
    assert(!a.contains(""));
    a.insert("pickle");
    a.insert("sauce");
    assert(!a.contains(""));
    a.insert("");
    assert(a.contains(""));
    a.erase("tt");
    assert(a.size() == 3 && a.contains("sauce") && a.contains("pickle") && a.contains(""));
    string z;
    assert(a.get(0, z));
    assert(a.get(1, z) && z == "pickle");
    assert(a.get(2, z) && z == "");

    //test swap functions
    Set b;
    b.insert("gg");
    Set c;
    c.insert("wp");
    c.insert("ff");
    b.swap(c);
    assert(b.size() == 2 && b.contains("wp") && b.contains("ff") &&
        c.size() == 1 && c.contains("gg"));

    //test copy constructor
    Set cc(b);
    assert(cc.get(0, x) && x == "wp");
    assert(cc.get(1, x) && x == "ff");

    Set d;
    d.insert("ant");
    d.insert("45");
    assert(!d.contains("4"));
    assert(d.size() == 2 && d.contains("ant") && d.contains("45"));


    Set sss;
    assert(sss.empty());
    ItemType f = "arepa";
    assert(!sss.get(42, f)); // x unchanged by get failure
    sss.insert("chapati");
    assert(sss.size() == 1);
    assert(sss.get(0, f) && f == "chapati");

    //test assignment operator

    Set y;
    Set yy;
    assert(y.insert("1"));
    assert(y.insert("6"));
    assert(y.insert("2"));
    assert(y.insert("3"));
    assert(y.insert("4"));
    assert(y.size()==5);
    assert(yy.insert("1"));
    yy = y;
    assert(yy.size() == 5);


    Set qq;
    Set rr;
    assert(qq.insert("62"));
    assert(!qq.insert("62"));
    assert(qq.insert("32"));
    assert(qq.insert("fd3"));
    assert(qq.insert("4e"));
    assert(qq.size() == 4);
    rr = qq;
    assert(rr.size() == 4);