DESCRIPTION OF DESIGN OF CLASSES:
In creating the ScaffoldImplementation, the data structure used was essentially a two dimensional integer vector in order to create
the levels and columns of the scaffold or "grid" assuming the levels and columns are valid positive input parameters. The vector would
be resized to become a grid that would be filled with -1 integers which resembles VACANT. Much of the other scaffold functions were then
built upon examining and incrementing through each elements of the grid in order to display the grid, count the number of empty (vacant)
spots, read what checker is at a given location, and to make a move given a column. For the makeMove function, there would be a different
data structure in the form of a list as a means to log the most recent move that was made. Thus, in the undoMove function, the list would
be used to pop the stored index of the most recent move to then change that slot back to VACANT.

For the PlayerImplementation, the chooseMove function for HumanPlayer was made to take in valid integers that represent the column numbering.
For the chooseMove function for BadPlayer, the design was to fill checkers left to right of the columns of the grid. This was using a nested
forloop to then go through each position of the grid and call on the checkerAt function from Scaffold.cpp to check if there is a vacant spot.
If so, the chooseMove function for BadPlayer proceeds to place the checker in that column in this same manner.

For the GameImplementation, pointers were used to incorporate a pointer to the dynamically allocated scaffold as well as the two players, red
and black. GameImplementation would use member initialization list to initialize all the private variables that are inputted in the parameters
accordingly as well as create a new scaffold. Boolean variables were used to also indicate whose turn it is which is then used in the takeTurn
function. Taketurn function checks if there are still vacant spots left in the grid which is done using the numberEmpty function from Scaffold.cpp.
Depending on the boolean variables, the red or black player will then make a move using the chooseMove function from Player.cpp as well as makeMove
function from Scaffold.cpp. The takeTurn function also holds the function of displaying the grid as well and consequently switching the boolean value
such that it would correspond to the turn of the other player next time takeTurn function is called upon. The "completed" function would make use of
a helper function that I created called "connected." Given parameters of the scaffold and values of N, number of columns, and number of levels, the
"connected" function would scout through the board to see if there is a connection of N for each direction (i.e. North, South, East, West, NE, NW,
SE, SW). If there is a connection, it returns the integer representation of the color that has the connection (red or black), else it returns vacant.
Consequently, the "completed" function utilizing the connection would set the winner to the corresponding color and return true, else returns false or
if the grid is full, "tiegame."


DESCRIPTION OF DESIGN FOR SmartPlayer::chooseMove:
Unlike the other PlayerImplementations, the SmartPlayer needs to be able to have the visualization/data of the entire grid and be able to tweak it
personally to observe the optimal moves the player can make in depthly. A recursive helper function was created in order to explore all or as many
possibilities that the SmartPlayer can make using a vector that logs the column choice as well as another vector that stores the rating of that column
choice in the corresponding index. This would ensure the two vectors are consistently at the same length. The core of the helper function includes the if
statement that checks if the chosen column/move would result in an end game (i.e. a game winning move, game losing move, or tie game). If it was a game 
ending move, it will push back the column choice of that move into the columnchoice vector as well as pushback the rating of that move where the magnitude
of the rating is inversely proportional to the depth of the move. If it is not a game ending move, the function proceeds to a forloop that goes through all
the columns from 1 to the maximum columns. If the current player/color "calling" the helper function is able to make the move, it will make that move and
subsequently call on the helper function recursively. Following the recursive call would be a call to the undoMove function to ensure that the moves made
that are already checked are undone so that the function can explore another branch or outcome. This core ifstatement is enclosed in an if statement checking
if the vector length of ratings is less than 25,000 checks. If the checks surpasses this limit (i.e. checked 25,000 end game outcomes), the function will finish
up its recursion and make a decision based on what it knows. In order to do this, the final part of the helper function will go through the ratings vector
find the greatest magnitude rating and will return the rating of that index. If the depth is 1 signaling that it is an elementary move and a nonrecursive call,
it will return the "best" column number of choice at that index which is forwarded to SmartPlayer::chooseMove, thus, concluding this implementation.


PSEUDOCODE FOR NON-TRIVIAL ALGORITHMS:
ScaffoldImpl::ScaffoldImpl(int nColumns, int nLevels)
{
	store column and level parameter variables
	if either values are negative or 0,
		terminate program
	
	use column and level variables to create grid that is (level by column) big.
	fill the (level by column) size grid with integer -1 to represent VACANT
}

int ScaffoldImpl::numberEmpty() const
{
	create integer counter variable set to 0

	go through each index/element of the grid:
		if the position is integer VACANT (i.e. -1)
			increment counter for number of empty spots

	return counter variable
}

int ScaffoldImpl::checkerAt(int column, int level) const
{
	if integer value at the given column and level on the grid is RED (i.e. 0)
		print "R"
	if integer value at the given column and level on the grid is BLACK (i.e. 1)
		print "B"
	if integer value at the given column and level on the grid is VACANT (i.e. -1)
		print " "
}

void ScaffoldImpl::display() const
{
	for levels = 0:number of levels of grid {
		for columns = 0:number of columns of grid {
			print "|"
			if integer value at the given column and level on the grid is RED (i.e. 0)
				print "R"
			if integer value at the given column and level on the grid is BLACK (i.e. 1)
				print "B"
			if integer value at the given column and level on the grid is VACANT (i.e. -1)
				print " "
		}
		print "|"
	}
	for last row (i.e. level 1), print "+-" (number of columns) times
	print "+"
}

bool ScaffoldImpl::makeMove(int column, int color)
{
	if column is invalid (out of bounds)
		return false

	go through the levels of the given column from bottom (first) level to top in search for first VACANT spot
	at the VACANT spot, change the element to the given color of the parameter
	store the index of that element into a list
	return true		
}

int ScaffoldImpl::undoMove()
{
	if list is empty
		do nothing
	
	store the values from the list into a integer variable for column and level respectively
	make the element at that column and level VACANT
	return the column number of that element (which is the undoed action)
}

int HumanPlayerImpl::chooseMove(const Scaffold& s, int N, int color)
{
	ask for user to input a valid integer value using cin
	
	if the inputted integer corresponds to a filled column
		ask for user to input a valid integer value using cin until valid integer is inputted
	return the column number of the valid integer chosen
}

int BadPlayerImpl::chooseMove(const Scaffold& s, int N, int color)
{
	picks the next VACANT column spot on the grid from left to right using forloop
		return the column number of the VACANT spot picked
	if the grid is filled
		return 0
}

bool GameImpl::completed(int& winner) const		
{
	check through each element of the array in forloop:
		if theres an N connection for RED
			set winner to RED (i.e. 0)
			delete allocated grid
			return true
		if theres an N connection for BLACK
			set winner to BLACK i.e. 1)
			delete allocated grid
			return true
	if scaffold is filled
		set winner to TIE_GAME (i.e. -1)
		delete allocated grid
		return true

	return false
}

bool GameImpl::takeTurn()
{
	if grid is not empty
		if it is red's move,
			take in input for redplayer's choice of column and make the move
			change it to black's move next
			display grid
			return true
		if it is black's move,
			take in input for blackplayer's choice of column and make the move
			change it to red's move next
			display grid
			return true

	if game is over
		return false
}

void GameImpl::play()
{
	print "Press Enter to continue"
	display grid

	while there is no connection/winner
		call takeTurn() function
	
	if winner is RED (i.e. 0)
		print "(red player's name) won!"
	if winner is BLACK (i.e. 1)
		print "(black player's name) won!"
	if winner is TIE_GAME (i.e. -1)
		print "Tie!"	
}

//additional function implemented/used in bool GameImpl::completed(int& winner) const in Game.cpp and 
//bool completed(Scaffold* s, int& winner, int column, int N) in Player.cpp
int connected(Scaffold* s, int level, int col, int N)
{
	//checks in all directions for connection surrounding the given level and column position
	create red and black counters integer variables set to 0

	repeatedly for each given directions "North", "South", "East", "West", "NE", "NW", "SE", "SW":
		set red and black counters integer variables to 0
		for 0:N
			while in bounds of the grid
				keep checking in the (given) direction for connection
				increment counter of the corresponding color
		if red counter equals N
			return RED (i.e. 0)
		if black counter equals N
			return BLACK (i.e. 1)
	
	if no connections found
		return VACANT (i.e. -1)
}

int SmartPlayerImpl::chooseMove(const Scaffold& s, int N, int color)
{
	if no move is possible	
		return 0

	create copy of scaffold
	pass in copy of scaffold into helper function "chooseBetterMove" along with variables that keep track of
	int N and int color parameters, and integer variables for depth and current column starting at value 1

	return column of choice from "chooseBetterMove"
}

//additional functions implemented/used in int SmartPlayerImpl::chooseMove(const Scaffold& s, int N, int color)
int chooseBetterMove(Scaffold& s, int N, int color, int firstcolor, int currentcolumn, int depth, vector<int>& ratings, vector<int>& columnchoice)
{
	if time limit is reached (or size of rating vectors or outcomes checked reaches 25,000)
	{
		alternate the color variable for the next recursive call on itself
		
		if the move at the current column is a game ending move (i.e. move that ends the game)
		{
			push back currentcolumn number into the columnchoice vector
			if the winner is the current color
				pushback a positive value to represent a rating that is inversely proportional to depth of the move/recursion
			if it is a tie
				pushback value 0 into the ratings vector that resembles a tie game
			else
				pushback a negative value to represent a rating that is inversely proportional to depth of the move/recursion
		}
		else
		{
			going through each column from 1 to max columns:
				if the function can make a move at that column
					call chooseBetterMove() with the currentcolumn number and incrementing depth by 1 in the function parameter
					undoMove()
		}
	}
	
	create integers called "index" and "max" equal to 0 (where "max" is compared against values in the ratings vector)
	for values from 0 to size of ratings vector:
		if magnitude value at the current index of the ratings vector is greater than "max"
			set "max" equal to the magnitude value at the current index of the ratings vector
			set "index" equal to current index in forloop
	
	if the depth equals 1 signaling that it is a nonrecursive call and an elementary move
		return the column choice at "index"
	
	return rating value at "index"
}

//used in int chooseBetterMove(Scaffold& s, int N, int color, int firstcolor, int currentcolumn, int depth, vector<int>& ratings, vector<int>& columnchoice)
bool completed(Scaffold* s, int& winner, int column, int N)
{
	check through each element of the array in forloop:
		if theres an N connection for RED
			set winner to RED (i.e. 0)
			return true
		if theres an N connection for BLACK
			set winner to BLACK i.e. 1)
			return true

	if scaffold is filled
		set winner to TIE_GAME (i.e. -1)
		return true

	return false		
}



NOTES:
Initially, the notable problem I had was which function in Game.cpp should be deleting the allocated "scaffold" grid as well as
displaying the grid each time a player makes a move. The play function was chosen to delete and display the allocated grid, but
there would be a memory leak created in the asserts given in the specs. This was discovered to be due to the play function having
to be called upon in order to delete the grid. However, I ended up moving the deletion from the play function to the completed function
such that the memory leak isn't reliant only from calls on the play function. Additionally, this would resolve issues with having
the grid deleted prematurely, yet having the function trying to display the deleted grid afterwards. Another notable problem was
trying to create a helper function such that it does not check the out of bounds of the vector which would consequently create an
error. Eventually, I realized creating addtional int variables that account for how far out the algorithm can search in the vector
would be the solution and ensure the function is always in bounds from the search.

A major bug I supposedly identified was how to utilize the alarmclock function that was provided. This bug was not a matter of understanding
how to use the TimeOut() calls which is self explanatory, but despite passing the alarm clock by reference from SmartPlayer::chooseMove() into
the helper function for chooseMove(), the program would not wrap up the outcomes it has already analyzed within the given time limit. It is as if
the alarm clock did not have any impact to the code. Even with debugging and utilizing cout statements, the program would simply go overtime and find
all of the possibilities before actually printing the cout statements that would be in an if statement with parameter ac.Timeout(). Instead, I would
manually set an artificial time constraint that is dependent on the number of ratings or outcomes analyzed which would meet the performance requirement
of the project 3 spec.