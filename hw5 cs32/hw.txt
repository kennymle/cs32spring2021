hw5

1a.
     	   50
         /    \
       20      60
     /     \      \
    10     40     70
     \     /     /  \
     15   30    65  80
         /  \       /
        25   31    79

1b.
inorder (left, root, right): 10, 15, 20, 25, 30, 31, 40, 50, 60, 65, 70, 79, 80
preorder (root, left, right): 50, 20, 10, 15, 40, 30, 25, 31, 60, 70, 65, 80, 79
postorder (left, right, root): 15, 10, 25, 31, 30, 40, 20, 65, 79, 80, 70, 60, 50

1c.
     	   50
         /    \
       25      60
     /     \      \
    10     40     70
     \     /     /  \
     15   31    65  80
                    /
                   79

2a.
struct Node {
public:
	Node(int d){
		data = d;
		parent = nullptr;
		leftchild = nullptr;
		rightchild = nullptr;
	}
private:
	int data;
	Node* parent;
	Node* leftchild;
	Node* rightchild;
};

2b.
Create and initialize new Node with int data d.
If tree is empty (root ptr = nullptr)
	point root ptr to new Node
	set new Node's parent to nullptr
	return
Look at root node as current node
Repeatedly:
	if value of new Node == value of current node
		return
	if value of new Node < value of current node
		if left child of current node is nullptr
			set parent of new Node to current node
			set left child of current node to new Node
			return
		else
			set current node to left child
	else
		if right child of current node is nullptr
			set parent of new Node to current node
			set right child of current node to new Node
			return
		else
			set current node to right child
			
	
3a.
     	 7
       /   \
      5     6
     / \   /
    4   1 2  

3b.
[7,5,6,4,1,2], int item = 9

3c.
[6,5,2,4,1]

4a. O(C + S)
4b. O(logC + S)
4c. O(logC + logS)
4d. O(logS)       since O(1+ logS)
4e. O(1)          since O(1 + 1)
4f. O(logC + S)
4g. O(SlogS)      since O(1 + S + SlogS)
4h. O(ClogS)